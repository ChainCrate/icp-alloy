type TokenType = 
 variant {
   erc1155;
   erc721;
 };
type Time = int;
type SignedPrincipal = text;
type SignatureCheckSuccess = 
 record {
   checkTime: Time;
   signedPrincipal: SignedPrincipal;
 };
type Response = 
 variant {
   err;
   ok;
 };
type RequestId = nat;
type Request = 
 variant {
   addNfts: vec Nft;
   connectEthWallet: record {
                       EthWallet__1;
                       SignedPrincipal;
                     };
   isNftOwned: Nft;
   login;
   setAddressFiltered: record {
                         Address;
                         bool;
                       };
 };
type PublicEvent = 
 variant {
   addNft: AddNftEvent;
   install: record {time: Time;};
 };
type OwnershipCheckSuccess = record {checkTime: Time;};
type Nft__1 = 
 record {
   contract: Address;
   network: text;
   owner: Address;
   tokenId: nat;
   tokenType: TokenType;
 };
type NftId = 
 record {
   contract: Address;
   network: text;
   tokenId: nat;
 };
type Nft = 
 record {
   contract: Address;
   network: text;
   owner: Address;
   tokenId: nat;
   tokenType: TokenType;
 };
type Main = 
 service {
   /// Verify that the given NFTs are owned by the caller, and store the results.
   addNfts: (vec Nft) -> (bool);
   /// Connect a new Ethereum wallet, using the given ECDSA signature for authorization.
   connectEthWallet: (EthWallet__1, SignedPrincipal) -> (ConnectEthWallet);
   /// If you've already created an account, you can use this method to speed up the login process.
   fastLogin: () -> (opt Login) query;
   /// Get a list of connected Ethereum wallets.
   getEthWallets: () -> (GetEthWallets) query;
   /// Retrieve the full log for this canister.
   getHistory: () -> (opt vec Event) query;
   /// Retrieve the NFTs which were previously verified via `addNfts()`.
   getNfts: () -> (vec Nft) query;
   /// Retrieve a public-facing log for this canister.
   getPublicHistory: () -> (vec PublicEvent) query;
   /// Retrieve a Candid representation of the canister's internal state.
   getState: () -> (opt vec Entry) query;
   /// Check if an NFT is currently owned by the given principal.
   isNftOwned: (principal, Nft) -> (bool);
   /// Login and fetch user details. Creates an account if none exists for the caller principal.
   login: () -> (Login);
   /// Hide or show all NFTs with the given smart contract or wallet address.
   setAddressFiltered: (Address, bool) -> (bool);
 };
type Login = record {createTime: Time;};
type Internal = 
 variant {
   verifyEcdsaOutcome: bool;
   verifyOwnerOutcome: record {
                         Nft;
                         bool;
                       };
 };
type GetEthWallets = vec EthWallet__1;
type Event = 
 variant {
   install: record {
              cyclesBalance: opt nat;
              installer: principal;
              time: Time;
            };
   internal: record {
               internal: Internal;
               requestId: RequestId;
             };
   request:
    record {
      caller: principal;
      cyclesBalance: opt nat;
      request: Request;
      requestId: RequestId;
      time: Time;
    };
   response: record {
               requestId: RequestId;
               response: Response;
             };
 };
type EthWallet__1 = text;
type EthWallet = text;
type Entry = 
 variant {
   ethNft: Nft__1;
   ethWallet: record {
                EthWallet;
                CreateSuccess;
              };
   "principal": record {
                  principal;
                  CreateSuccess;
                };
   walletOwnsNft: record {
                    EthWallet;
                    NftId;
                    OwnershipCheckSuccess;
                  };
   walletSignsPrincipal: record {
                           EthWallet;
                           principal;
                           SignatureCheckSuccess;
                         };
 };
type CreateSuccess = record {createTime: Time;};
type ConnectEthWallet = bool;
type Address = text;
type AddNftEvent = 
 record {
   nft: Nft;
   "principal": principal;
   time: Time;
   wallet: EthWallet__1;
 };
service : () -> Main
